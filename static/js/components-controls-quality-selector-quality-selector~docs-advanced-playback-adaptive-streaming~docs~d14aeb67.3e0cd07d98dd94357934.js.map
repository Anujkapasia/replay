{"version":3,"sources":["webpack:///./src/replay/components/controls/QualitySelector/QualitySelector.js","webpack:///./src/replay/components/generic/Selector/helpers.js","webpack:///./src/replay/components/generic/Selector/Selector.js","webpack:///./src/replay/components/generic/ToggleButton/ToggleButton.js"],"names":["QualitySelector","bitrate","_this","props","setProperties","selectionStrategy","bitrateFix","bitrateCap","id","label","Infinity","autoLabel","formatBitrateLabel","currentBitrate","data","index","arr","_this$props","matchValue","length","React","_this$props2","this","bitrates","toggleContent","classNamePrefix","Array","isArray","items","concat","selectedItem","filter","isSelected","react__WEBPACK_IMPORTED_MODULE_0__","_generic_Selector_Selector__WEBPACK_IMPORTED_MODULE_1__","itemMapper","bitrateToItem","className","onSelect","handleSelect","reverseOrder","expandedToggleContent","collapsedToggleContent","defaultClassNamePrefix","selectItemClasses","classes","selectorItem","selectItemSelectedClasses","selectorItemSelected","SelectorItem","_React$Component","_getPrototypeOf2","_classCallCheck","_len","arguments","args","_key","_getPrototypeOf","call","apply","_defineProperty","_assertThisInitialized","element","onRef","item","getKeyboardShortcutBlocker","keyboardEvent","key","preventDefault","handleClick","_inherits","value","defaultItemClassName","canReceiveFocus","selectedClassName","classNames","hydrateClassNames","selectClasses","tabIndex","undefined","react","role","aria-selected","ref","handleRef","onClick","onKeyDown","handleKeyDown","onKeyUp","handleKeyUp","focusElement","upwards","isReverseOrder","baseElement","elements","slice","reverse","i","document","activeElement","j","focus","selectCollapsedClasses","selectorCollapsed","selector","selectExpandedClasses","selectorExpanded","selectItemsContainerClasses","selectorItemsContainer","Selector","Selector_classCallCheck","Selector_getPrototypeOf","Selector_defineProperty","Selector_assertThisInitialized","toggleElement","isOn","setState","isExpanded","itemElement","focusableItems","itemData","helpers_SelectorItem","handleItemRef","state","itemClassName","renderedItems","map","renderSelectorItem","itemsContainerClassNames","toggleButtonClasses","toggleButtonOff","selectorToggle","selectorToggleOff","toggleButtonOn","selectorToggleOn","onMouseLeave","handleMouseLeave","ToggleButton","onToggle","handleToggle","onToggleRef","toggledOffContent","toggledOnContent","useDefaultClassNaming","selectOffClasses","toggleButton","selectOnClasses","toggleClassName","content","aria-pressed","title"],"mappings":"woCA8BA,IAEMA,0VAaW,SAACC,GACVC,EAAKC,MAAMC,gBACwB,gBAAjCF,EAAKC,MAAME,kBACbH,EAAKC,MAAMC,cAAc,CAAEE,WAAYL,IAEvCC,EAAKC,MAAMC,cAAc,CAAEG,WAAYN,iCAK7B,SAACA,GAAD,MAAsB,CACpCO,GAAIP,EACJQ,MACER,IAAYS,IACRR,EAAKC,MAAMQ,UACXT,EAAKC,MAAMS,mBAAmBX,EAASA,IAAYC,EAAKC,MAAMU,gBACpEC,KAAMb,4BAGK,SAACA,EAAiBc,EAAeC,GAAuB,IAAAC,EACbf,EAAKC,MAAnDG,EAD2DW,EAC3DX,WAAYC,EAD+CU,EAC/CV,WAAYF,EADmCY,EACnCZ,kBAC1Ba,EACU,MAAdZ,GAAoC,MAAdC,EACI,gBAAtBF,EACEC,EACAC,EACFD,GAAcC,EACpB,MAAmB,QAAfW,EACe,IAAVH,EACiB,QAAfG,EACFH,IAAUC,EAAIG,OAAS,EAEvBlB,IAAYiB,6PA7CKE,uDAiDnB,IAAAC,EACqDC,KAAKnB,MAAzDoB,EADDF,EACCE,SAAUd,EADXY,EACWZ,MAAOe,EADlBH,EACkBG,cAAeC,EADjCJ,EACiCI,gBACxC,GAAIC,MAAMC,QAAQJ,IAAaA,EAASJ,OAAS,EAAG,CAClD,IAAMS,EAAQ,CAAClB,KAAUmB,OAAON,GAC1BO,EAAeF,EAAMG,OAAOT,KAAKU,YAAY,IAAMJ,EAAM,GAE/D,OACEK,EAAA,cAACC,EAAA,EAAD,CACEN,MAAOA,EACPO,WAAYb,KAAKc,cACjBX,gBAAiBA,EACjBY,UA9DQ,mBA+DRP,aAAcA,EACdrB,MAAOA,EACP6B,SAAUhB,KAAKiB,aACfC,cAAc,EACdC,sBAAuBjB,EACvBkB,uBAAwBlB,IAI5B,OAAO,4CAtEPxB,iBACkB,CACpByB,gBAAiBkB,IACjBtC,kBAAmB,kBAHjBL,kCAMkE,CACpE,WACA,iBACA,aACA,eAiEWA,ikICrFf,IAAM4C,EAAoB,SAAAC,GAAO,OAAIA,EAAQC,cACvCC,EAA4B,SAAAF,GAAO,OAAIA,EAAQG,sBAAwBH,EAAQC,cAExEG,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAjD,mGAAAkD,CAAA9B,KAAA2B,GAAA,QAAAI,EAAAC,UAAAnC,OAAAoC,EAAA,IAAA7B,MAAA2B,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAD,EAAAC,GAAAF,UAAAE,GAAA,SAAAlC,QAAA6B,EAAAM,EAAAR,IAAAS,KAAAC,MAAAR,EAAA,CAAA7B,MAAAO,OAAA0B,IAAArD,oDAAA0D,EAAAC,IAAA3D,IAAA,YACc,SAAC4D,GACX5D,EAAKC,MAAM4D,MAAMD,EAAS5D,EAAKC,MAAMY,SAFzC6C,EAAAC,IAAA3D,IAAA,cAKgB,kBAAMA,EAAKC,MAAMmC,UAAYpC,EAAKC,MAAMmC,SAASpC,EAAKC,MAAM6D,KAAKlD,QALjF8C,EAAAC,IAAA3D,IAAA,gBAOkB+D,YAA2B,CAAC,QAAS,OAPvDL,EAAAC,IAAA3D,IAAA,cASgB,SAACgE,GACa,UAAtBA,EAAcC,KAAyC,MAAtBD,EAAcC,MACjDD,EAAcE,iBACdlE,EAAKmE,iBAZXnE,YAAA,0OAAAoE,CAAArB,EAAkC7B,kBAAlC6B,KAAA,EAAAkB,IAAA,SAAAI,MAAA,WAgBW,IAAAtD,EAUHK,KAAKnB,MARPkC,EAFKpB,EAELoB,UACAZ,EAHKR,EAGLQ,gBACAoB,EAJK5B,EAIL4B,QACA2B,EALKvD,EAKLuD,qBACAR,EANK/C,EAML+C,KACAhC,EAPKf,EAOLe,WACAyC,EARKxD,EAQLwD,gBACAC,EATKzD,EASLyD,kBAEMjE,EAAUuD,EAAVvD,MACFkE,EAAaC,YAAkB,CACnC/B,UACApB,kBACAoD,cAAe7C,EAAae,EAA4BH,EACxD+B,WAAY,CAACtC,EAAWmC,EAAsBxC,EAAa0C,EAAoB,QAE3EI,EAAWL,EAAkB,OAAIM,EACvC,OACEC,EAAA,qBACEC,KAAK,SACLC,gBAAelD,EACfK,UAAWsC,EACXQ,IAAK7D,KAAK8D,UACVC,QAAS/D,KAAK+C,YACdiB,UAAWhE,KAAKiE,cAChBC,QAASlE,KAAKmE,YACdX,SAAUA,GACVE,EAAA,qBAAKF,UAAW,GAAIrE,oCA7C5BwC,EAAA,GAmDO,SAASyC,EACdC,EACAC,EACAhE,EACAiE,GAGA,IADA,IAAMC,GAAYF,EAAiBhE,EAAMmE,MAAM,GAAGC,UAAYpE,GAAOC,OAAOgE,GACnEI,EAAI,EAAGA,EAAIH,EAAS3E,OAAQ8E,IACnC,GAAIH,EAASG,KAAOC,SAASC,cAC3B,GAAIR,GACF,GAAIM,EAAI,EACN,IAAK,IAAIG,EAAIH,EAAI,EAAGG,GAAK,EAAGA,IAAK,CAC/B,IAAMtC,EAAUgC,EAASM,GACzB,GAAItC,EAEF,OADAA,EAAQuC,QACDvC,QAKb,GAAImC,EAAIH,EAAS3E,OAAS,EACxB,IAAK,IAAIiF,EAAIH,EAAI,EAAGG,EAAIN,EAAS3E,OAAQiF,IAAK,CAC5C,IAAMtC,EAAUgC,EAASM,GACzB,GAAItC,EAEF,OADAA,EAAQuC,QACDvC,qxEC9ErB,IAKMU,EAAuB,gBACvBE,EAAoB,WAEpB4B,EAAyB,SAAAzD,GAAO,OAAIA,EAAQ0D,mBAAqB1D,EAAQ2D,UACzEC,EAAwB,SAAA5D,GAAO,OAAIA,EAAQ6D,kBAAoB7D,EAAQ2D,UACvEG,EAA8B,SAAA9D,GAAO,OAAIA,EAAQ+D,wBAEjDC,cAKJ,SAAAA,EAAY1G,GAAc,IAAAD,MAAA,mGAAA4G,CAAAxF,KAAAuF,KACxBvF,OAAAyF,EAAAF,GAAAnD,KAAApC,KAAMnB,GAAND,oDADwB8G,EAAAC,IAAA/G,IAAA,iBAOY,IAPZ8G,EAAAC,IAAA/G,IAAA,gBAQI,MARJ8G,EAAAC,IAAA/G,IAAA,cAUZ,SAACgH,GACbhH,EAAKgH,cAAgBA,IAXGF,EAAAC,IAAA/G,IAAA,eAcX,SAACiH,GAAD,OAAmBjH,EAAKkH,SAAS,CAAEC,WAAYF,MAdpCH,EAAAC,IAAA/G,IAAA,gBAgBV,SAACoH,EAA2BvG,GAC1Cb,EAAKqH,eAAexG,GAASuG,IAjBLN,EAAAC,IAAA/G,IAAA,qBAoBL,SAAC8D,EAAWjD,GAC/B,IAAMyG,EAAWtH,EAAKC,MAAMgC,WAAW6B,GACvC,OACEgB,EAAA,cAACyC,EAAD,CACEtD,IAAKqD,EAAShH,GACdwD,KAAMwD,EACNzG,MAAOA,EACPuB,SAAUpC,EAAKC,MAAMmC,SACrByB,MAAO7D,EAAKwH,cACZ1F,WAAYgC,IAAS9D,EAAKC,MAAM2B,aAChC2C,gBAAiBvE,EAAKyH,MAAMN,WAC5B3C,kBAAmBA,EACnBF,qBAAsBA,EACtBnC,UAAWnC,EAAKC,MAAMyH,cACtB/E,QAAS3C,EAAKC,MAAM0C,QACpBpB,gBAAiBvB,EAAKC,MAAMsB,oBAnCRuF,EAAAC,IAAA/G,IAAA,gBAwCV,SAACgE,GACf,OAAQA,EAAcC,KACpB,IAAK,UACL,IAAK,KAEH,YADAD,EAAcE,iBAEhB,IAAK,YACL,IAAK,OAIH,YAHIlE,EAAKyH,MAAMN,YACbnD,EAAcE,kBAGlB,QACE,UArDoB4C,EAAAC,IAAA/G,IAAA,cAyDZ,SAACgE,GACThE,EAAKyH,MAAMN,YACa,YAAtBnD,EAAcC,KAA2C,OAAtBD,EAAcC,MACnDD,EAAcE,iBACdsB,GAAa,EAAMxF,EAAKC,MAAMqC,eAAgB,EAAOtC,EAAKqH,eAAgBrH,EAAKgH,iBAEvD,cAAtBhD,EAAcC,KAA6C,SAAtBD,EAAcC,OACrDD,EAAcE,iBACSsB,GACrB,EACAxF,EAAKC,MAAMqC,eAAgB,EAC3BtC,EAAKqH,eACLrH,EAAKgH,iBAEgBhH,EAAKgH,eAC1BhH,EAAKkH,SAAS,CAAEC,YAAY,MAIN,YAAtBnD,EAAcC,KAA2C,OAAtBD,EAAcC,MACnDD,EAAcE,iBACdlE,EAAKkH,SAAS,CAAEC,YAAY,OA9ERL,EAAAC,IAAA/G,IAAA,mBAmFP,WACjBA,EAAKkH,SAAS,CAAEC,YAAY,MAlF5BnH,EAAKyH,MAAQ,CACXN,YAAY,GAHUnH,yPALLkB,uDA4FZ,IAAAH,EAUHK,KAAKnB,MARPkC,EAFKpB,EAELoB,UACAZ,EAHKR,EAGLQ,gBACAoB,EAJK5B,EAIL4B,QACAjB,EALKX,EAKLW,MACAc,EANKzB,EAMLyB,uBACAD,EAPKxB,EAOLwB,sBACAD,EARKvB,EAQLuB,aACA/B,EATKQ,EASLR,MAEIoH,EAAgBjG,EAClBY,EACEZ,EAAMkG,IAAIxG,KAAKyG,oBAAoB/B,UACnCpE,EAAMkG,IAAIxG,KAAKyG,oBACjB,KACEpD,EAAaC,YAAkB,CACnC/B,UACApB,kBACAoD,cAAevD,KAAKqG,MAAMN,WAAaZ,EAAwBH,EAC/D3B,WAAY,CAACtC,EA5Hc,WA4HuBf,KAAKqG,MAAMN,WAzHzC,WACC,eA0HjBW,EAA2BpD,YAAkB,CACjD/B,UACAgC,cAAe8B,EACflF,kBACAkD,WAAY,CAhIa,oBAkIrBsD,EAAsBpF,EACxB,CACEqF,gBAAiBrF,EAAQsF,gBAAkBtF,EAAQuF,kBACnDC,eAAgBxF,EAAQyF,kBAE1B,KAEJ,OACEtD,EAAA,qBACE3C,UAAWsC,EACXa,QAASlE,KAAKmE,YACdH,UAAWhE,KAAKiE,cAChBgD,aAAcjH,KAAKkH,kBACnBxD,EAAA,cAACyD,EAAA,EAAD,CACEtB,KAAM7F,KAAKqG,MAAMN,WACjBhF,UAlJoB,kBAmJpBZ,gBAAiBA,EACjBoB,QAASoF,EACTxH,MAAOA,EACPiI,SAAUpH,KAAKqH,aACf5E,MAAOzC,KAAKsH,YACZC,kBAAmBnG,EACnBoG,iBAAkBrG,IAEpBuC,EAAA,qBAAKC,KAAK,UAAU5C,UAAW2F,GAC5BH,2CAjJLhB,iBACkB,CACpBkC,uBAAuB,IAsJZlC,u8FCxKf,IAIMmC,EAAmB,SAAAnG,GAAO,OAAIA,EAAQqF,iBAAmBrF,EAAQoG,cACjEC,EAAkB,SAAArG,GAAO,OAAIA,EAAQwF,gBAAkBxF,EAAQoG,cAK/DR,yVAKU,kBAAMvI,EAAKC,MAAMuI,UAAYxI,EAAKC,MAAMuI,UAAUxI,EAAKC,MAAMgH,kCAE3DlD,YAA2B,CAAC,QAAS,+BAEvC,SAACC,GACa,UAAtBA,EAAcC,KAAyC,MAAtBD,EAAcC,MACjDD,EAAcE,iBACdlE,EAAKmE,0QAZgBjD,uDAgBhB,IAAAH,EACkGK,KAAKnB,MAAtGgH,EADDlG,EACCkG,KAAM1G,EADPQ,EACOR,MAAO4B,EADdpB,EACcoB,UAAWZ,EADzBR,EACyBQ,gBAAiBqH,EAD1C7H,EAC0C6H,iBAAkBD,EAD5D5H,EAC4D4H,kBAAmB9E,EAD/E9C,EAC+E8C,MAAOlB,EADtF5B,EACsF4B,QACvFsG,EAAkBhC,EA1BR,aADC,cA4BXxC,EAAaC,YAAkB,CACnC/B,UACAgC,cAAesC,EAAO+B,EAAkBF,EACxCvH,kBACAkD,WAAY,CAACtC,EAjCG,gBAiCuB8G,KAEnCC,EAAUjC,EAAO2B,EAAmBD,EAC1C,OACE5G,EAAA,qBACEgD,KAAK,SACLoE,eAAclC,EACdmC,MAAO7I,EACP4E,QAAS/D,KAAK+C,YACdmB,QAASlE,KAAKmE,YACdH,UAAWhE,KAAKiE,cAChBJ,IAAKpB,EACL1B,UAAWsC,EACXG,SAAU,GACV7C,EAAA,qBAAK6C,UAAW,GAAIsE,2CArCtBX,iBACkB,CACpBM,uBAAuB,IAyCZN","file":"static/js/components-controls-quality-selector-quality-selector~docs-advanced-playback-adaptive-streaming~docs~d14aeb67.e062a676.js","sourcesContent":["// @flow\nimport * as React from 'react';\nimport Selector from '../../generic/Selector/Selector';\nimport { defaultClassNamePrefix } from '../../common';\nimport type { CommonProps } from '../../common';\nimport type { StreamStateKeysForObservation } from '../../player/PlayerController/ControllerContext';\n\nexport type QualitySelectionStrategy = 'cap-bitrate' | 'fix-bitrate';\n\ntype Props = CommonProps & {\n  /** ⇘︎ The list of bitrates available for adaptive selection, and for being fixed or set as cap level. */\n  bitrates?: Array<number>,\n  /** ⇘︎ The currently playing bitrate. */\n  currentBitrate?: number,\n  /** ⇘︎ If playback is (already) fixed to one bitrate, this prop is set. */\n  bitrateFix?: ?number,\n  /** ⇘︎ If adaptive bitrate selection is (already) capped at a level, this prop is set. */\n  bitrateCap?: ?number,\n  /** The content of the toggle button of the selector. */\n  toggleContent: React.Node,\n  /** ⇗ When one item is clicked, this callback is invoked with an object having a property with either the name bitrateCap or bitrateFix and a value according to the selected bitrate. For the auto option, the value is Infinity. */\n  setProperties?: ({ bitrateFix: ?number } | { bitrateCap: ?number }) => void,\n  /** Configures whether the selector should specify bitrate cap or fixing. */\n  selectionStrategy?: QualitySelectionStrategy,\n  /** The label for the selector item used for resetting capped or fixed bitrate. */\n  autoLabel: string,\n  /** Should return the item text to be displayed for each bitrate. The second argument indicates if the bitrate is currently playing. */\n  formatBitrateLabel: (number, boolean) => string\n};\n\nconst className = 'quality-selector';\n\nclass QualitySelector extends React.Component<Props> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix,\n    selectionStrategy: 'cap-bitrate'\n  };\n\n  static streamStateKeysForObservation: StreamStateKeysForObservation = [\n    'bitrates',\n    'currentBitrate',\n    'bitrateFix',\n    'bitrateCap'\n  ];\n\n  handleSelect = (bitrate: number) => {\n    if (this.props.setProperties) {\n      if (this.props.selectionStrategy === 'fix-bitrate') {\n        this.props.setProperties({ bitrateFix: bitrate });\n      } else {\n        this.props.setProperties({ bitrateCap: bitrate });\n      }\n    }\n  };\n\n  bitrateToItem = (bitrate: number) => ({\n    id: bitrate,\n    label:\n      bitrate === Infinity\n        ? this.props.autoLabel\n        : this.props.formatBitrateLabel(bitrate, bitrate === this.props.currentBitrate),\n    data: bitrate\n  });\n\n  isSelected = (bitrate: number, index: number, arr: Array<number>) => {\n    const { bitrateFix, bitrateCap, selectionStrategy } = this.props;\n    const matchValue =\n      bitrateFix != null && bitrateCap != null\n        ? selectionStrategy === 'fix-bitrate'\n          ? bitrateFix\n          : bitrateCap\n        : bitrateFix || bitrateCap;\n    if (matchValue === 'min') {\n      return index === 1;\n    } else if (matchValue === 'max') {\n      return index === arr.length - 1;\n    } else {\n      return bitrate === matchValue;\n    }\n  };\n\n  render() {\n    const { bitrates, label, toggleContent, classNamePrefix } = this.props;\n    if (Array.isArray(bitrates) && bitrates.length > 1) {\n      const items = [Infinity].concat(bitrates);\n      const selectedItem = items.filter(this.isSelected)[0] || items[0];\n\n      return (\n        <Selector\n          items={items}\n          itemMapper={this.bitrateToItem}\n          classNamePrefix={classNamePrefix}\n          className={className}\n          selectedItem={selectedItem}\n          label={label}\n          onSelect={this.handleSelect}\n          reverseOrder={true}\n          expandedToggleContent={toggleContent}\n          collapsedToggleContent={toggleContent}\n        />\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default QualitySelector;\n","// @flow\nimport * as React from 'react';\nimport { getKeyboardShortcutBlocker, hydrateClassNames } from '../../common';\nimport type { CommonGenericProps, Id } from '../../common';\n\nexport type ItemData = {\n  label: string,\n  id?: Id,\n  data?: any\n};\n\ntype SelectorItemProps = CommonGenericProps & {\n  item: ItemData,\n  index: number,\n  isSelected: boolean,\n  canReceiveFocus: boolean,\n  defaultItemClassName: string,\n  selectedClassName: string,\n  onSelect?: any => void,\n  onRef: (?HTMLElement, number) => void\n};\n\nconst selectItemClasses = classes => classes.selectorItem;\nconst selectItemSelectedClasses = classes => classes.selectorItemSelected || classes.selectorItem;\n\nexport class SelectorItem extends React.Component<SelectorItemProps> {\n  handleRef = (element: ?HTMLElement) => {\n    this.props.onRef(element, this.props.index);\n  };\n\n  handleClick = () => this.props.onSelect && this.props.onSelect(this.props.item.data);\n\n  handleKeyDown = getKeyboardShortcutBlocker(['Enter', ' ']);\n\n  handleKeyUp = (keyboardEvent: KeyboardEvent) => {\n    if (keyboardEvent.key === 'Enter' || keyboardEvent.key === ' ') {\n      keyboardEvent.preventDefault();\n      this.handleClick();\n    }\n  };\n\n  render() {\n    const {\n      className,\n      classNamePrefix,\n      classes,\n      defaultItemClassName,\n      item,\n      isSelected,\n      canReceiveFocus,\n      selectedClassName\n    } = this.props;\n    const { label } = item;\n    const classNames = hydrateClassNames({\n      classes,\n      classNamePrefix,\n      selectClasses: isSelected ? selectItemSelectedClasses : selectItemClasses,\n      classNames: [className, defaultItemClassName, isSelected ? selectedClassName : null]\n    });\n    const tabIndex = canReceiveFocus ? 0 : undefined;\n    return (\n      <div\n        role=\"option\"\n        aria-selected={isSelected}\n        className={classNames}\n        ref={this.handleRef}\n        onClick={this.handleClick}\n        onKeyDown={this.handleKeyDown}\n        onKeyUp={this.handleKeyUp}\n        tabIndex={tabIndex}>\n        <div tabIndex={-1}>{label}</div>\n      </div>\n    );\n  }\n}\n\nexport function focusElement(\n  upwards: boolean,\n  isReverseOrder: boolean,\n  items: Array<?HTMLElement>,\n  baseElement: ?HTMLElement\n) {\n  const elements = (isReverseOrder ? items.slice(0).reverse() : items).concat(baseElement);\n  for (let i = 0; i < elements.length; i++) {\n    if (elements[i] === document.activeElement) {\n      if (upwards) {\n        if (i > 0) {\n          for (let j = i - 1; j >= 0; j--) {\n            const element = elements[j];\n            if (element) {\n              element.focus();\n              return element;\n            }\n          }\n        }\n      } else {\n        if (i < elements.length - 1) {\n          for (let j = i + 1; j < elements.length; j++) {\n            const element = elements[j];\n            if (element) {\n              element.focus();\n              return element;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","// @flow\nimport * as React from 'react';\nimport { type CommonGenericProps, hydrateClassNames } from '../../common';\nimport ToggleButton from '../ToggleButton/ToggleButton';\nimport { focusElement, SelectorItem } from './helpers';\nimport type { ItemData } from './helpers';\n\ntype Props = CommonGenericProps & {\n  items: Array<any>,\n  selectedItem?: any,\n  reverseOrder?: boolean,\n  itemClassName?: string,\n  collapsedToggleContent?: React.Node,\n  expandedToggleContent?: React.Node,\n  label?: string,\n  itemMapper: any => ItemData,\n  onSelect?: any => void\n};\n\ntype SelectorState = {\n  isExpanded: boolean\n};\n\nconst defaultSelectorClassName = 'selector';\nconst expandToggleClassName = 'selector-toggle';\nconst selectorItemsClassName = 'selector-items';\nconst expandedClassName = 'expanded';\nconst collapsedClassName = 'collapsed';\nconst defaultItemClassName = 'selector-item';\nconst selectedClassName = 'selected';\n\nconst selectCollapsedClasses = classes => classes.selectorCollapsed || classes.selector;\nconst selectExpandedClasses = classes => classes.selectorExpanded || classes.selector;\nconst selectItemsContainerClasses = classes => classes.selectorItemsContainer;\n\nclass Selector extends React.Component<Props, SelectorState> {\n  static defaultProps = {\n    useDefaultClassNaming: true\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isExpanded: false\n    };\n  }\n\n  focusableItems: Array<?HTMLElement> = [];\n  toggleElement: ?HTMLElement = null;\n\n  onToggleRef = (toggleElement: ?HTMLElement) => {\n    this.toggleElement = toggleElement;\n  };\n\n  handleToggle = (isOn: boolean) => this.setState({ isExpanded: isOn });\n\n  handleItemRef = (itemElement: ?HTMLElement, index: number) => {\n    this.focusableItems[index] = itemElement;\n  };\n\n  renderSelectorItem = (item: any, index: number) => {\n    const itemData = this.props.itemMapper(item);\n    return (\n      <SelectorItem\n        key={itemData.id}\n        item={itemData}\n        index={index}\n        onSelect={this.props.onSelect}\n        onRef={this.handleItemRef}\n        isSelected={item === this.props.selectedItem}\n        canReceiveFocus={this.state.isExpanded}\n        selectedClassName={selectedClassName}\n        defaultItemClassName={defaultItemClassName}\n        className={this.props.itemClassName}\n        classes={this.props.classes}\n        classNamePrefix={this.props.classNamePrefix}\n      />\n    );\n  };\n\n  handleKeyDown = (keyboardEvent: KeyboardEvent) => {\n    switch (keyboardEvent.key) {\n      case 'ArrowUp':\n      case 'Up':\n        keyboardEvent.preventDefault();\n        return;\n      case 'ArrowDown':\n      case 'Down':\n        if (this.state.isExpanded) {\n          keyboardEvent.preventDefault();\n        }\n        return;\n      default:\n        return;\n    }\n  };\n\n  handleKeyUp = (keyboardEvent: KeyboardEvent) => {\n    if (this.state.isExpanded) {\n      if (keyboardEvent.key === 'ArrowUp' || keyboardEvent.key === 'Up') {\n        keyboardEvent.preventDefault();\n        focusElement(true, this.props.reverseOrder || false, this.focusableItems, this.toggleElement);\n      }\n      if (keyboardEvent.key === 'ArrowDown' || keyboardEvent.key === 'Down') {\n        keyboardEvent.preventDefault();\n        const focusedElement = focusElement(\n          false,\n          this.props.reverseOrder || false,\n          this.focusableItems,\n          this.toggleElement\n        );\n        if (focusedElement === this.toggleElement) {\n          this.setState({ isExpanded: false });\n        }\n      }\n    } else {\n      if (keyboardEvent.key === 'ArrowUp' || keyboardEvent.key === 'Up') {\n        keyboardEvent.preventDefault();\n        this.setState({ isExpanded: true });\n      }\n    }\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isExpanded: false });\n  };\n\n  render() {\n    const {\n      className,\n      classNamePrefix,\n      classes,\n      items,\n      collapsedToggleContent,\n      expandedToggleContent,\n      reverseOrder,\n      label\n    } = this.props;\n    const renderedItems = items\n      ? reverseOrder\n        ? items.map(this.renderSelectorItem).reverse()\n        : items.map(this.renderSelectorItem)\n      : null;\n    const classNames = hydrateClassNames({\n      classes,\n      classNamePrefix,\n      selectClasses: this.state.isExpanded ? selectExpandedClasses : selectCollapsedClasses,\n      classNames: [className, defaultSelectorClassName, this.state.isExpanded ? expandedClassName : collapsedClassName]\n    });\n    const itemsContainerClassNames = hydrateClassNames({\n      classes,\n      selectClasses: selectItemsContainerClasses,\n      classNamePrefix,\n      classNames: [selectorItemsClassName]\n    });\n    const toggleButtonClasses = classes\n      ? {\n          toggleButtonOff: classes.selectorToggle || classes.selectorToggleOff,\n          toggleButtonOn: classes.selectorToggleOn\n        }\n      : null;\n\n    return (\n      <div\n        className={classNames}\n        onKeyUp={this.handleKeyUp}\n        onKeyDown={this.handleKeyDown}\n        onMouseLeave={this.handleMouseLeave}>\n        <ToggleButton\n          isOn={this.state.isExpanded}\n          className={expandToggleClassName}\n          classNamePrefix={classNamePrefix}\n          classes={toggleButtonClasses}\n          label={label}\n          onToggle={this.handleToggle}\n          onRef={this.onToggleRef}\n          toggledOffContent={collapsedToggleContent}\n          toggledOnContent={expandedToggleContent}\n        />\n        <div role=\"listbox\" className={itemsContainerClassNames}>\n          {renderedItems}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Selector;\n","// @flow\nimport * as React from 'react';\nimport { type CommonGenericProps, getKeyboardShortcutBlocker, hydrateClassNames } from '../../common';\n\ntype Props = CommonGenericProps & {\n  /** Set to true if the button should be in the toggled on mode. */\n  isOn?: boolean,\n  /** The label will appear in the title attribute of the root DOM element of the toggle button. */\n  label?: string,\n  /** The button content to be displayed when the button is toggled off. */\n  toggledOffContent?: React.Node,\n  /** The button content to be displayed when the button is toggled on. */\n  toggledOnContent?: React.Node,\n  /** A callback method that will be invoked when the button is clicked and the value toggled. If the button has been toggled on, true is passed to the callback. */\n  onToggle?: boolean => void,\n  /** A callback method invoked with the rendered button element, for focus purposes. */\n  onRef?: (?HTMLElement) => void\n};\n\nconst baseClassName = 'toggle-button';\nconst offClassName = 'toggled-off';\nconst onClassName = 'toggled-on';\n\nconst selectOffClasses = classes => classes.toggleButtonOff || classes.toggleButton;\nconst selectOnClasses = classes => classes.toggleButtonOn || classes.toggleButton;\n\n/**\n * Renders a button with two states - toggled on and off. When clicked, it reports back the opposite state.\n */\nclass ToggleButton extends React.Component<Props> {\n  static defaultProps = {\n    useDefaultClassNaming: true\n  };\n\n  handleClick = () => this.props.onToggle && this.props.onToggle(!this.props.isOn);\n\n  handleKeyDown = getKeyboardShortcutBlocker(['Enter', ' ']);\n\n  handleKeyUp = (keyboardEvent: KeyboardEvent) => {\n    if (keyboardEvent.key === 'Enter' || keyboardEvent.key === ' ') {\n      keyboardEvent.preventDefault();\n      this.handleClick();\n    }\n  };\n\n  render() {\n    const { isOn, label, className, classNamePrefix, toggledOnContent, toggledOffContent, onRef, classes } = this.props;\n    const toggleClassName = isOn ? onClassName : offClassName;\n    const classNames = hydrateClassNames({\n      classes,\n      selectClasses: isOn ? selectOnClasses : selectOffClasses,\n      classNamePrefix,\n      classNames: [className, baseClassName, toggleClassName]\n    });\n    const content = isOn ? toggledOnContent : toggledOffContent;\n    return (\n      <div\n        role=\"button\"\n        aria-pressed={isOn}\n        title={label}\n        onClick={this.handleClick}\n        onKeyUp={this.handleKeyUp}\n        onKeyDown={this.handleKeyDown}\n        ref={onRef}\n        className={classNames}\n        tabIndex={0}>\n        <div tabIndex={-1}>{content}</div>\n      </div>\n    );\n  }\n}\n\nexport default ToggleButton;\n"],"sourceRoot":""}