(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{"./src/replay/docs/custom-player/custom-strings-graphics.mdx":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return h});var o=n("./node_modules/react/index.js"),a=n.n(o),r=n("./node_modules/@mdx-js/tag/dist/index.js");function s(e){return(s="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}function c(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function i(e,t){return!t||"object"!==s(t)&&"function"!==typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=i(this,m(t).call(this,e))).layout=null,n}var n,o,s;return function(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,a.a.Component),n=t,(o=[{key:"render",value:function(){var e=this.props,t=e.components;p(e,["components"]);return a.a.createElement(r.MDXTag,{name:"wrapper",components:t},a.a.createElement(r.MDXTag,{name:"h1",components:t,props:{id:"how-to-change-graphics-or-texts"}},"How to change graphics or texts"),a.a.createElement(r.MDXTag,{name:"p",components:t},"This chapter describes how to customise either the texts (strings) used in the player, or the graphics (icons). For instance internationalisation can be implemented by composing a custom player with a different set of strings."),a.a.createElement(r.MDXTag,{name:"p",components:t},"Similarly, a different design can be set up in a custom player by passing a different set of icons. Icons can be specified as characters in special fonts (along with CSS importing and defining the font face), SVG, or even bitmaps in ",a.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"<img/>")," elements if desired."),a.a.createElement(r.MDXTag,{name:"p",components:t},"One or both of these sets can be combined when creating a custom player, and also along with a custom player UI render method."),a.a.createElement(r.MDXTag,{name:"h2",components:t,props:{id:"the-player-composer"}},"The player composer"),a.a.createElement(r.MDXTag,{name:"p",components:t},"The easiest approach to replace the set of strings/and or graphics, is to use the ",a.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"composePlayer()")," method. It produces a React component from what's typically being subject to customisation."),a.a.createElement(r.MDXTag,{name:"p",components:t},"As a starting point, this is how the ",a.a.createElement(r.MDXTag,{name:"a",components:t,parentName:"p",props:{href:"https://github.com/vimond/replay/blob/master/src/replay/default-player/Replay.js"}},"default Replay player")," is composed, with parameters specifying the strings and graphics to be part of the Replay component:"),a.a.createElement(r.MDXTag,{name:"pre",components:t},a.a.createElement(r.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},"import composePlayer from '../playerComposer';\nimport graphics from './default-skin/graphics';\nimport strings from './strings';\n\nconst Replay = composePlayer({\n  name: 'Replay',\n  graphics,\n  strings\n});\n\n// This is the component to be consumed in a full React SPA.\nexport default Replay;\n")),a.a.createElement(r.MDXTag,{name:"h2",components:t,props:{id:"how-are-texts-and-graphics-defined"}},"How are texts and graphics defined?"),a.a.createElement(r.MDXTag,{name:"p",components:t},"The ",a.a.createElement(r.MDXTag,{name:"a",components:t,parentName:"p",props:{href:"https://github.com/vimond/replay/blob/master/src/replay/default-player/strings.js"}},"default strings"),", as referred by the composition of the Replay player, are grouped by controls. The properties for each controls correspond to actually prop types expected by the control. Most of the strings are tooltip texts, with some exceptions."),a.a.createElement(r.MDXTag,{name:"p",components:t},"Similarly, for the ",a.a.createElement(r.MDXTag,{name:"a",components:t,parentName:"p",props:{href:"https://github.com/vimond/replay/blob/master/src/replay/default-player/default-skin/graphics.js"}},"graphics for the default skin"),", the definitions are structured per control or component. Here, the property values are mainly SVG graphics from the ",a.a.createElement(r.MDXTag,{name:"a",components:t,parentName:"p",props:{href:"https://feathericons.com/"}},"Feather")," icon set, wrapped as React components, so that they can be rendered within the control directly."),a.a.createElement(r.MDXTag,{name:"p",components:t},"Again, the property keys refer to prop names of the controls. Graphics can be added to all props with type ",a.a.createElement(r.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"React.Node"),", as listed in the controls reference. And as long as the property values are accepted by React and the browser, the graphics or content can be any element types."),a.a.createElement(r.MDXTag,{name:"h2",components:t,props:{id:"replacing-the-strings-or-graphics-sets"}},"Replacing the strings or graphics sets"),a.a.createElement(r.MDXTag,{name:"p",components:t},"It is recommended to create a copy of the mentioned files as a start point, and perform the desired modifications. If also the control set (player UI) is different, properties for new controls might be added to the definitions, or unused definitions removed."),a.a.createElement(r.MDXTag,{name:"p",components:t},"A custom player component can then be created by referring and passing in the (in this case imaginary) new files to the player composer:"),a.a.createElement(r.MDXTag,{name:"pre",components:t},a.a.createElement(r.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},"import composePlayer from 'vimond-replay/playerComposer';\nimport graphics from './my-custom-skin/graphics';\nimport strings from './my-localization/strings-nn_no';\n\nconst CustomPlayer = composePlayer({\n  name: 'CustomPlayer',\n  graphics,\n  strings\n});\n\nexport default CustomPlayer;\n")),a.a.createElement(r.MDXTag,{name:"p",components:t},"The resulting player component can be used just like Replay."),a.a.createElement(r.MDXTag,{name:"pre",components:t},a.a.createElement(r.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-jsx"}},'<CustomPlayer source="..." />\n')),a.a.createElement(r.MDXTag,{name:"h2",components:t,props:{id:"combining-new-texts-andor-graphics-with-a-custom-ui"}},"Combining new texts and/or graphics with a custom UI"),a.a.createElement(r.MDXTag,{name:"p",components:t},"If also adding a custom UI through a ",a.a.createElement(r.MDXTag,{name:"a",components:t,parentName:"p",props:{href:"/custom-player/add-controls-components#adding-a-title-overlay---step-by-step"}},"custom player UI render method"),", the custom set of strings or graphics should be imported and included directly in the render method. How to this, is shown in the referred example."))}}])&&c(n.prototype,o),s&&c(n,s),t}();h.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=docs-custom-player-custom-strings-graphics.e243506a537b7e4dbcfc.js.map