(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{"./src/replay/docs/advanced-playback/drm.mdx":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return d});var a=n("./node_modules/react/index.js"),r=n.n(a),o=n("./node_modules/@mdx-js/tag/dist/index.js");function c(e){return(c="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function i(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function m(e,t){return!t||"object"!==c(t)&&"function"!==typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var d=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=m(this,l(t).call(this,e))).layout=null,n}var n,a,c;return function(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(t,r.a.Component),n=t,(a=[{key:"render",value:function(){var e=this.props,t=e.components;s(e,["components"]);return r.a.createElement(o.MDXTag,{name:"wrapper",components:t},r.a.createElement(o.MDXTag,{name:"h1",components:t,props:{id:"drm"}},"DRM"),r.a.createElement(o.MDXTag,{name:"p",components:t},"Every browser only supports one DRM technology. Because of the closed/black-box security model of DRM, browsers' DRM support cannot be extended. There are three relevant technologies for the modern browsers: "),r.a.createElement(o.MDXTag,{name:"ul",components:t},r.a.createElement(o.MDXTag,{name:"li",components:t,parentName:"ul"},"FairPlay: Only in Safari and with HLS streams"),r.a.createElement(o.MDXTag,{name:"li",components:t,parentName:"ul"},"PlayReady: MS Edge and Internet Explorer"),r.a.createElement(o.MDXTag,{name:"li",components:t,parentName:"ul"},"Widevine: Chrome on all platforms, Firefox")),r.a.createElement(o.MDXTag,{name:"p",components:t},"PlayReady and Widevine can typically be used with Shaka Player, and typically with MPEG-DASH (even if HLS combined with these two DRM techs appear to be under development)."),r.a.createElement(o.MDXTag,{name:"p",components:t},"This means that for covering all modern browsers with DRM encrypted playback, the following DRM services and stream formats must be available for one single content title:"),r.a.createElement(o.MDXTag,{name:"ul",components:t},r.a.createElement(o.MDXTag,{name:"li",components:t,parentName:"ul"},"Acquisition URL for FairPlay license service, to be used with HLS streams encrypted for FairPlay."),r.a.createElement(o.MDXTag,{name:"li",components:t,parentName:"ul"},"Acquisition URLs for a Widevine license service and a PlayReady license service, to be used with MPEG-DASH streams with common encryption (CENC).")),r.a.createElement(o.MDXTag,{name:"p",components:t},"According to the current browser, Replay must receive a source object specifying at least a license acquisition URL for the compatible DRM service, along with an URL to a stream encrypted for this DRM technology."),r.a.createElement(o.MDXTag,{name:"p",components:t},"For the same content title, the source object could then look like this in the following browsers:"),r.a.createElement(o.MDXTag,{name:"p",components:t},"Firefox, Chrome:"),r.a.createElement(o.MDXTag,{name:"pre",components:t},r.a.createElement(o.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},"const source = {\n  streamUrl: 'https://my-stream-cdn.net/my-content-title/stream.mpd',\n  contentType: 'application/dash+xml',\n  licenseUrl: 'https://my-license-service.com/widevine/license/my-content-title'\n};\n")),r.a.createElement(o.MDXTag,{name:"p",components:t},"Edge:"),r.a.createElement(o.MDXTag,{name:"pre",components:t},r.a.createElement(o.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},"const source = {\n  streamUrl: 'https://my-stream-cdn.net/my-content-title/stream.mpd',\n  contentType: 'application/dash+xml',\n  licenseUrl: 'https://my-license-service.com/playready/license/my-content-title'\n};\n")),r.a.createElement(o.MDXTag,{name:"p",components:t},"Safari:"),r.a.createElement(o.MDXTag,{name:"pre",components:t},r.a.createElement(o.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},"const source = {\n  streamUrl: 'https://my-stream-cdn.net/my-content-title/stream.m3u8',\n  contentType: 'application/x-mpegurl',\n  licenseUrl: 'https://my-license-service.com/fairplay/license/my-content-title',\n  licenseAcquisitionDetails: {\n    fairPlayCertificateUrl: 'https://my-license-service.com/fairplay/certificate'    \n  }\n};\n")),r.a.createElement(o.MDXTag,{name:"p",components:t},"Typically the ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"licenseAcquisitionDetails")," source object needs more details specified in order to complete the license acquisition, most commonly authorization headers or token headers to be passed in the license request."),r.a.createElement(o.MDXTag,{name:"h2",components:t,props:{id:"video-streamer-selection-with-drm-encrypted-streams"}},"Video streamer selection with DRM encrypted streams"),r.a.createElement(o.MDXTag,{name:"p",components:t},"The video streamer resolver or Replay does not cover matching of DRM technology with browser and stream technology."),r.a.createElement(o.MDXTag,{name:"p",components:t},"When using Replay for DRM playback, the app inserting the player have the responsibility to pass the correct stream and DRM details as the source object to the Replay component. This typically involves detecting the browser, and then look up stream and DRM details from e.g. a REST API."),r.a.createElement(o.MDXTag,{name:"p",components:t},"When the stream content type is specified, as in the examples above, the VideoStreamerResolver can be used for selecting the correct video streamer and third party library supporting the stream."),r.a.createElement(o.MDXTag,{name:"h2",components:t,props:{id:"specifying-further-license-acquisition-or-drm-details"}},"Specifying further license acquisition or DRM details"),r.a.createElement(o.MDXTag,{name:"h3",components:t,props:{id:"headers"}},"Headers"),r.a.createElement(o.MDXTag,{name:"p",components:t},"Headers can be added to the license acqusition request, if required. They are specified with header names/values as keys/values, like in this example:"),r.a.createElement(o.MDXTag,{name:"pre",components:t},r.a.createElement(o.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},"const source = {\n  streamUrl: 'https://my-stream-cdn.net/my-content-title/stream.mpd',\n  contentType: 'application/dash+xml',\n  licenseUrl: 'https://my-license-service.com/playready/license/my-content-title'\n  licenseAcquisitionDetails: {\n    licenseRequestHeaders: {\n      Authorization: 'some-user-token',\n      'x-some-custom-header': 'some-value'\n    }    \n  }\n};\n")),r.a.createElement(o.MDXTag,{name:"h3",components:t,props:{id:"certificates"}},"Certificates"),r.a.createElement(o.MDXTag,{name:"p",components:t},"In order to complete a FairPlay license acquisition, a certificate URL must always be specified. For Widevine, a similar URL can be passed. See the Safari example above for FairPlay, and the following for Widevine:"),r.a.createElement(o.MDXTag,{name:"pre",components:t},r.a.createElement(o.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},"const source = {\n  streamUrl: 'https://my-stream-cdn.net/my-content-title/stream.mpd',\n  contentType: 'application/dash+xml',\n  licenseUrl: 'https://my-license-service.com/playready/license/my-content-title',\n  licenseAcquisitionDetails: {\n    widevineServiceCertificateUrl: 'https://my-license-service.com/widevine/certificate'      \n  }\n};\n")),r.a.createElement(o.MDXTag,{name:"p",components:t},"If no ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"widevineServiceCertificateUrl")," is specified, the Widevine CDM reuses the license acquisition URL for fetching the service certificate."),r.a.createElement(o.MDXTag,{name:"p",components:t},"The certificate URLs can also be specified as part of Replay's configuration."),r.a.createElement(o.MDXTag,{name:"h3",components:t,props:{id:"fairplay-request-formats-and-content-ids"}},"FairPlay request formats and content IDs"),r.a.createElement(o.MDXTag,{name:"p",components:t},"The FairPlay license acquisition client in the ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"HtmlVideoStreamer")," supports three request formats: ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"'base64'")," (legacy), ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"'binary'"),", and ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"'formdata'")," (default). Different services expect different data and formats, and these three types adapt to some tested real-world services."),r.a.createElement(o.MDXTag,{name:"p",components:t},"FairPlay's concept of content ID or asset ID can either be specified directly in the ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"contentId")," property, or be extracted from the ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"skd://")," url. "),r.a.createElement(o.MDXTag,{name:"p",components:t},"If ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"contentIdExtractMatch")," contains a regex (either regex object or string), what's matching in the skd url will be passed as the content ID in the license request. The commented out example underneath passes the full URL."),r.a.createElement(o.MDXTag,{name:"pre",components:t},r.a.createElement(o.MDXTag,{name:"code",components:t,parentName:"pre",props:{className:"language-javascript"}},"const source = {\n  streamUrl: 'https://my-stream-cdn.net/my-content-title/stream.m3u8',\n  contentType: 'application/x-mpegurl',\n  licenseUrl: 'https://my-license-service.com/fairplay/license/my-content-title',\n  licenseAcquisitionDetails: {\n    fairPlayCertificateUrl: 'https://my-license-service.com/fairplay/certificate',\n    contentId: 'my-content-id', // Either specify the content ID, or how to extract it:\n    // contentIdExtractMatch: /(.*)/\n    fairPlayRequestFormat: 'base64' \n  }\n};\n")),r.a.createElement(o.MDXTag,{name:"p",components:t},"The ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"contentIdExtractMatch")," rule and FairPlay request format can also be specified as part of Replay's configuration."))}}])&&i(n.prototype,a),c&&i(n,c),t}();d.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=docs-advanced-playback-drm.3e0cd07d98dd94357934.js.map