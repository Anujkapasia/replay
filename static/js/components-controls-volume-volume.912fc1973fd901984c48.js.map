{"version":3,"sources":["webpack:///./src/replay/components/controls/Volume/Volume.js","webpack:///./src/replay/components/controls/Volume/Volume.mdx","webpack:///./src/replay/components/generic/ToggleButton/ToggleButton.js","webpack:///./src/replay/docs/mdx-helpers/ShowCase.js","webpack:///./src/replay/docs/mdx-helpers/SimpleTable.js","webpack:///./src/replay/docs/props-footnote.md"],"names":["Volume","isMuted","_this","props","setProperties","volume","React","isIos","navigator","userAgent","match","_this$props","this","label","volumeSliderLabel","muteToggleLabel","classNamePrefix","mutedContent","unmutedContent","volumeSliderHandleContent","volumeSliderTrackContent","prefixedClassName","prefixClassNames","react__WEBPACK_IMPORTED_MODULE_0__","className","title","_generic_ToggleButton_ToggleButton__WEBPACK_IMPORTED_MODULE_2__","isOn","toggledOffContent","toggledOnContent","onToggle","handleMuteToggleClick","_generic_Slider_Slider__WEBPACK_IMPORTED_MODULE_3__","value","maxValue","handleContent","trackContent","onValueChange","handleVolumeSliderChange","trackClassName","handleClassName","defaultClassNamePrefix","displayName","MDXContent","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","layout","Component","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","docz__WEBPACK_IMPORTED_MODULE_2__","__codesandbox","__position","__code","__scope","ShowCase","Volume2","VolumeX","SimpleTable","Footnote","_docs_mdx_helpers_ShowCase__WEBPACK_IMPORTED_MODULE_4__","render","_ref","_Volume__WEBPACK_IMPORTED_MODULE_3__","react_feather__WEBPACK_IMPORTED_MODULE_5__","of","_docs_props_footnote_md__WEBPACK_IMPORTED_MODULE_7__","href","_docs_mdx_helpers_SimpleTable__WEBPACK_IMPORTED_MODULE_6__","rows","Element","Class name","Generic class name","States","Parent","selectOffClasses","classes","toggleButtonOff","toggleButton","selectOnClasses","toggleButtonOn","ToggleButton","getKeyboardShortcutBlocker","keyboardEvent","key","preventDefault","handleClick","onRef","toggleClassName","classNames","hydrateClassNames","selectClasses","content","role","aria-pressed","onClick","onKeyUp","handleKeyUp","onKeyDown","handleKeyDown","ref","tabIndex","useDefaultClassNaming","convertPropsToState","state","Object","keys","forEach","_defineProperty","_assertThisInitialized","setState","height","style","width","justifyContent","_objectSpread","tableStyles","padding","tableLayout","boxShadow","borderSpacing","borderColor","borderCollapse","borderStyle","borderRadius","overflowY","fontSize","color","display","theadStyles","background","textAlign","trStyles","orderSpacing","tdStyles","verticalAlign","tdItalicStyles","fontStyle","opacity","tdCodeStyles","fontFamily","whiteSpace","keyBase","map","row","values","join","length","headers","header","i","j","formatContent"],"mappings":"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","file":"static/js/components-controls-volume-volume.aee39cfc.js","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { defaultClassNamePrefix, prefixClassNames } from '../../common';\nimport type { CommonProps } from '../../common';\nimport ToggleButton from '../../generic/ToggleButton/ToggleButton';\nimport Slider from '../../generic/Slider/Slider';\nimport type { StreamStateKeysForObservation } from '../../player/PlayerController/ControllerContext';\n\ntype Props = CommonProps & {\n  /** ⇘︎ The current volume level, a number between 0 and 1. */\n  volume?: number,\n  /** ⇘︎ The current mute state. false means unmuted. */\n  isMuted?: boolean,\n  volumeSliderLabel?: string,\n  muteToggleLabel?: string,\n  /** Element(s) displayed when isMuted is set to true The convention is to display a disabled or \"silent\" loudspeaker icon. */\n  mutedContent: React.Node,\n  /** Element(s) displayed when isMuted is set to false The convention is to display a loudspeaker icon with sound waves. */\n  unmutedContent: React.Node,\n  volumeSliderHandleContent?: React.Node,\n  volumeSliderTrackContent?: React.Node,\n  /** ⇗ This callback is invoked with { isMuted: true } or { isMuted: false } when the mute button is toggled. If the volume slider handle position is changed, it is invoked with { volume: newLevel } */\n  setProperties?: ({ volume: number } | { isMuted: boolean }) => void\n};\n\nconst className = 'volume';\nconst disabledClassName = 'volume-disabled';\nconst muteToggleClassName = 'mute-toggle';\nconst volumeSliderClassName = 'volume-slider';\nconst volumeSliderHandleClassName = 'volume-slider-handle';\nconst volumeSliderTrackClassName = 'volume-slider-track';\nconst maxVolume = 1;\n\nclass Volume extends React.Component<Props> {\n  static defaultProps = {\n    classNamePrefix: defaultClassNamePrefix\n  };\n\n  static streamStateKeysForObservation: StreamStateKeysForObservation = ['volume', 'isMuted'];\n\n  handleMuteToggleClick = (isMuted: boolean) => {\n    if (this.props.setProperties) {\n      this.props.setProperties({ isMuted });\n    }\n  };\n\n  handleVolumeSliderChange = (volume: number) => {\n    const setProperties = this.props.setProperties;\n    if (setProperties) {\n      setProperties({ isMuted: false, volume });\n    }\n  };\n\n  render() {\n    const isIos = navigator.userAgent.match(/(iPad|iPhone|iPod)/i);\n    const {\n      volume,\n      isMuted,\n      label,\n      volumeSliderLabel,\n      muteToggleLabel,\n      classNamePrefix,\n      mutedContent,\n      unmutedContent,\n      volumeSliderHandleContent,\n      volumeSliderTrackContent\n    } = this.props;\n    const prefixedClassName = prefixClassNames(classNamePrefix, className, isIos && disabledClassName);\n    return (\n      <div className={prefixedClassName} title={label}>\n        <ToggleButton\n          label={muteToggleLabel}\n          isOn={isMuted}\n          toggledOffContent={unmutedContent}\n          toggledOnContent={mutedContent}\n          onToggle={this.handleMuteToggleClick}\n          classNamePrefix={classNamePrefix}\n          className={muteToggleClassName}\n        />\n        {!isIos && (\n          <Slider\n            label={volumeSliderLabel}\n            value={isMuted ? 0 : volume}\n            maxValue={maxVolume}\n            handleContent={volumeSliderHandleContent}\n            trackContent={volumeSliderTrackContent}\n            onValueChange={this.handleVolumeSliderChange}\n            classNamePrefix={classNamePrefix}\n            className={volumeSliderClassName}\n            trackClassName={volumeSliderTrackClassName}\n            handleClassName={volumeSliderHandleClassName}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nVolume.displayName = 'Volume';\nexport default Volume;\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz';\nimport Volume from './Volume';\nimport ShowCase from '../../../docs/mdx-helpers/ShowCase';\nimport { Volume2, VolumeX } from 'react-feather';\nimport SimpleTable from '../../../docs/mdx-helpers/SimpleTable';\nimport Footnote from '../../../docs/props-footnote.md';\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"volume-control\"}}>{`Volume control`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Control combining a mute toggle and volume slider.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"summary\"}}>{`Summary`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The mute button is \"on\" when the prop `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`isMuted`}</MDXTag>{` set to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`true`}</MDXTag>{`. It uses a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<ToggleButton/>`}</MDXTag>{`, and invokes `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`setProperties({ isMuted: value })`}</MDXTag>{` where value is the opposite of the prop `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`isMuted`}</MDXTag>{`. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mutedContent`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`unmutedContent`}</MDXTag>{` specify what button content should be displayed for the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`isMuted`}</MDXTag>{` `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`true`}</MDXTag>{`/`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`false`}</MDXTag>{` prop values.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The volume slider (using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<Slider/>`}</MDXTag>{`) operates on values between 0 and 1, specified in the prop `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`volume`}</MDXTag>{`. On dragging the handle, or clickingon the slider track, it invokes `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`setProperties({ volume: value })`}</MDXTag>{` where value is the changed value between 0 and 1.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If the prop `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`isMuted`}</MDXTag>{` is `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`true`}</MDXTag>{`, the volume slider will display a value of 0 (handle to the left). When dragging/clicking the slider, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`setProperties({ isMuted: false, volume: value })`}</MDXTag>{` will be called with the value corresponding to the changed slider value. In other words, adjusting the volume while muted, will also unmute video.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Note that iOS doesn't allow for programmatic adjustment of the volume. However mute toggling is allowed. The volume slider part of this control will not be rendered in iOS.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"example\"}}>{`Example`}</MDXTag>\n<Playground __codesandbox={`undefined`} __position={0} __code={'<ShowCase\\n  render={({ setProperties, isMuted, volume }) => (\\n    <Volume\\n      unmutedContent={<Volume2 />}\\n      mutedContent={<VolumeX />}\\n      setProperties={setProperties}\\n      volume={volume}\\n      isMuted={isMuted}\\n    />\\n  )}\\n/>'} __scope={{props: this ? this.props : props,Volume,ShowCase,Volume2,VolumeX,SimpleTable,Footnote}}>\n  <ShowCase render={({ setProperties, isMuted, volume }) => (\n    <Volume unmutedContent={<Volume2/>} mutedContent={<VolumeX/>} setProperties={setProperties} volume={volume} isMuted={isMuted}/>\n  )}/>\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"props\"}}>{`Props`}</MDXTag>\n<PropsTable of={Volume} />\n<Footnote/>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"component-dom-with-class-names\"}}>{`Component DOM with class names`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Please read the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"/custom-replay/skins-styles\"}}>{`general principles`}</MDXTag>{` for Replay class names and styling.`}</MDXTag>\n<SimpleTable rows={[{ \n  'Element': 'div',\n  'Class name': 'volume',\n  'Generic class name': '',\n  'States': 'volume-disabled',\n  'Parent': ''\n},{\n  'Element': 'div',\n  'Class name': 'mute-toggle',\n  'Generic class name': 'toggle-button',\n  'States': 'toggled-off, toggled-on',\n  'Parent': '.volume'\n},{\n  'Element': 'div',\n  'Class name': '',\n  'Generic class name': '',\n  'States': '',\n  'Parent': '.mute-toggle'\n},{ \n  'Element': 'div',\n  'Class name': 'volume-slider',\n  'Generic class name': 'slider',\n  'States': 'dragging',\n  'Parent': '.volume'\n},{\n  'Element': 'div',\n  'Class name': 'volume-track',\n  'Generic class name': 'slider-track',\n  'States': '',\n  'Parent': '.volume-slider'\n},{\n  'Element': 'div',\n  'Class name': 'volume-handle',\n  'Generic class name': 'slider-handle',\n  'States': '',\n  'Parent': '.volume-slider'\n}]}/>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"styling-requirements\"}}>{`Styling requirements`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The styling of the volume slider needs to follow some rules in order to get sensible responses from user interactions:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The draggable or clickable area will be the size of the track element, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`.volume-track`}</MDXTag>{`. Remember how margin, borders, padding, box-sizing, etc. affects the size.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`.volume-handle`}</MDXTag>{` positioning (between 0 and 100 percent from left or bottom) should align with the track size and placement.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The styling needs to take into account the size of the handle itself. The component will not subtract the size of the component in its positioning and value calculations.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The handle should ideally be shifted by half its width to the left for horizontal sliders, or half its height down for vertical sliders. It is the center coordinate that should count.`}</MDXTag>\n</MDXTag>\n           </MDXTag>\n  }\n}\n  ","// @flow\nimport * as React from 'react';\nimport { type CommonGenericProps, getKeyboardShortcutBlocker, hydrateClassNames } from '../../common';\n\ntype Props = CommonGenericProps & {\n  /** Set to true if the button should be in the toggled on mode. */\n  isOn?: boolean,\n  /** The label will appear in the title attribute of the root DOM element of the toggle button. */\n  label?: string,\n  /** The button content to be displayed when the button is toggled off. */\n  toggledOffContent?: React.Node,\n  /** The button content to be displayed when the button is toggled on. */\n  toggledOnContent?: React.Node,\n  /** A callback method that will be invoked when the button is clicked and the value toggled. If the button has been toggled on, true is passed to the callback. */\n  onToggle?: boolean => void,\n  /** A callback method invoked with the rendered button element, for focus purposes. */\n  onRef?: (?HTMLElement) => void\n};\n\nconst baseClassName = 'toggle-button';\nconst offClassName = 'toggled-off';\nconst onClassName = 'toggled-on';\n\nconst selectOffClasses = classes => classes.toggleButtonOff || classes.toggleButton;\nconst selectOnClasses = classes => classes.toggleButtonOn || classes.toggleButton;\n\n/**\n * Renders a button with two states - toggled on and off. When clicked, it reports back the opposite state.\n */\nclass ToggleButton extends React.Component<Props> {\n  static defaultProps = {\n    useDefaultClassNaming: true\n  };\n\n  handleClick = () => this.props.onToggle && this.props.onToggle(!this.props.isOn);\n\n  handleKeyDown = getKeyboardShortcutBlocker(['Enter', ' ']);\n\n  handleKeyUp = (keyboardEvent: KeyboardEvent) => {\n    if (keyboardEvent.key === 'Enter' || keyboardEvent.key === ' ') {\n      keyboardEvent.preventDefault();\n      this.handleClick();\n    }\n  };\n\n  render() {\n    const { isOn, label, className, classNamePrefix, toggledOnContent, toggledOffContent, onRef, classes } = this.props;\n    const toggleClassName = isOn ? onClassName : offClassName;\n    const classNames = hydrateClassNames({\n      classes,\n      selectClasses: isOn ? selectOnClasses : selectOffClasses,\n      classNamePrefix,\n      classNames: [className, baseClassName, toggleClassName]\n    });\n    const content = isOn ? toggledOnContent : toggledOffContent;\n    return (\n      <div\n        role=\"button\"\n        aria-pressed={isOn}\n        title={label}\n        onClick={this.handleClick}\n        onKeyUp={this.handleKeyUp}\n        onKeyDown={this.handleKeyDown}\n        ref={onRef}\n        className={classNames}\n        tabIndex={0}>\n        <div tabIndex={-1}>{content}</div>\n      </div>\n    );\n  }\n}\n\nexport default ToggleButton;\n","// @flow\nimport * as React from 'react';\nimport type { PlaybackProps, VideoStreamState } from '../../components/player/VideoStreamer/types';\nimport '../../replay-default.css';\n\ntype Props = {\n  render: (VideoStreamState & { setProperties: PlaybackProps => void }) => React.Node,\n  height?: string\n};\n\nconst convertPropsToState = (props: PlaybackProps): VideoStreamState => {\n  const state: VideoStreamState = {};\n  Object.keys(props).forEach(key => {\n    // $FlowFixMe Cheating by mixing PlaybackProps and VideoStreamState.\n    let value = props[key];\n    switch (key) {\n      case 'selectedAudioTrack':\n        // $FlowFixMe Cheating by mixing PlaybackProps and VideoStreamState.\n        state['currentAudioTrack'] = value;\n        break;\n      case 'selectedTextTrack':\n        // $FlowFixMe Cheating by mixing PlaybackProps and VideoStreamState.\n        state['currentTextTrack'] = value;\n        break;\n      default:\n        // $FlowFixMe Cheating by mixing PlaybackProps and VideoStreamState.\n        state[key] = value;\n    }\n  });\n  return state;\n};\n\nclass ShowCase extends React.Component<Props, VideoStreamState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {};\n  }\n\n  // $FlowFixMe Cheating by mixing PlaybackProps and VideoStreamState. Should work well for most of the props.\n  setProperties = (props: PlaybackProps) => this.setState(convertPropsToState(props));\n\n  render() {\n    const { setProperties, state } = this;\n    const { render, height } = this.props;\n    const style = height ? { width: '100%', height } : { width: '100%' };\n    return (\n      <div>\n        <div style={style} />\n        <div className=\"replay-controls-bar\" style={{ justifyContent: 'center' }}>\n          {render({ ...state, setProperties })}\n        </div>\n      </div>\n    );\n  }\n}\nexport default ShowCase;\n","// @flow\nimport * as React from 'react';\n\ntype Props = {\n  rows?: Array<{ [string]: string }>\n};\n\nconst tableStyles = {\n  padding: 0,\n  tableLayout: 'auto',\n  boxShadow: '0 0 0 1px #CED4DE',\n  borderSpacing: 0,\n  borderColor: 'gray',\n  borderCollapse: 'collapse',\n  borderStyle: 'hidden',\n  borderRadius: '4px',\n  overflowY: 'hidden',\n  fontSize: '14px',\n  color: '#13161F',\n  width: '100%',\n  display: 'table'\n};\n\nconst theadStyles = {\n  color: '#7D899C',\n  background: '#EEF1F5',\n  textAlign: 'left',\n  fontSize: '14px',\n  borderSpacing: 0,\n  borderCollapse: 'collapse'\n};\n\nconst trStyles = {\n  orderSpacing: 0,\n  borderCollapse: 'collapse'\n};\n\nconst tdStyles = {\n  padding: '20px',\n  verticalAlign: 'top'\n};\n\nconst tdItalicStyles = {\n  ...tdStyles,\n  fontStyle: 'italic',\n  opacity: 0.5\n};\n\nconst tdCodeStyles = {\n  ...tdStyles,\n  fontFamily: '\"Source Code Pro\",monospace',\n  whiteSpace: 'nowrap'\n};\n\nconst applyStyles = content => {\n  if (content === '') {\n    return tdItalicStyles;\n  } else {\n    return tdCodeStyles;\n  }\n};\n\nconst formatContent = content => {\n  if (content === '') {\n    return 'none';\n  } else {\n    return content;\n  }\n};\n\nconst SimpleTable = ({ rows }: Props) => {\n  const keyBase = rows ? rows.map(row => (Object.values(row): any).join('-')).join('-') : '';\n  if (rows && rows.length) {\n    const headers = Object.keys(rows[0]);\n    return (\n      <table style={tableStyles}>\n        <thead style={theadStyles}>\n          <tr style={trStyles}>\n            {headers.map(header => (\n              <th key={'header-' + header} style={tdStyles}>\n                {header}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map((row, i) => (\n            <tr key={keyBase + '-row-' + i} style={trStyles}>\n              {(Object.values(row): any).map((value, j) => (\n                <td key={keyBase + '-cell-' + i + '-' + j} style={applyStyles(value)}>\n                  {formatContent(value)}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n};\n\nexport default SimpleTable;\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"p\" components={components}>{`Props marked with ⇘ are updated with the video streamer's `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"/reference/observable-stream-state\"}}>{`state property`}</MDXTag>{` having the same name, when connected by the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"/architecture/connected-controls#connecting-the-controls\"}}><MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`connectControl()`}</MDXTag>{` HOC`}</MDXTag>{`. The ︎`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`setProperties()`}</MDXTag>{` callback prop is marked with ︎⇗ because it is connected for changing the playback state. More info in the architecture description of `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"/architecture/overview#arrows-and-boxes\"}}>{`two-way data flow`}</MDXTag>{`.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}