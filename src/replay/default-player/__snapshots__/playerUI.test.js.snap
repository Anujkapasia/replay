// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renderPlayerUI() renders and recognises the specified props. 1`] = `
<PlayerUIContainer
  aspectRatio={
    Object {
      "horizontal": 16,
      "vertical": 9,
    }
  }
  className="replay"
  classNamePrefix="replay-"
  configuration={
    Object {
      "setting": "value",
      "ui": Object {
        "liveDisplayMode": "clock-time",
        "qualitySelectionStrategy": "cap-bitrate",
        "skipButtonOffset": -20,
      },
    }
  }
  render={[Function]}
>
  <AspectRatio
    aspectRatio={
      Object {
        "horizontal": 16,
        "vertical": 9,
      }
    }
    className="replay"
    render={[Function]}
  >
    <div
      className="replay"
      style={
        Object {
          "position": "relative",
        }
      }
    >
      <div
        style={
          Object {
            "display": "block",
            "paddingTop": "56.25%",
            "width": "100%",
          }
        }
      />
      <Fullscreen
        render={[Function]}
      >
        <InteractionDetector
          configuration={
            Object {
              "setting": "value",
              "ui": Object {
                "liveDisplayMode": "clock-time",
                "qualitySelectionStrategy": "cap-bitrate",
                "skipButtonOffset": -20,
              },
            }
          }
          render={[Function]}
        >
          <ConnectedKeyboardShortcuts
            configuration={
              Object {
                "setting": "value",
                "ui": Object {
                  "liveDisplayMode": "clock-time",
                  "qualitySelectionStrategy": "cap-bitrate",
                  "skipButtonOffset": -20,
                },
              }
            }
            fullscreenState={
              Object {
                "enterFullscreen": [Function],
                "exitFullscreen": [Function],
                "isFullscreen": false,
                "updateProperty": [Function],
              }
            }
            nudge={[Function]}
            render={[Function]}
          >
            <KeyboardShortcuts
              configuration={
                Object {
                  "setting": "value",
                  "ui": Object {
                    "liveDisplayMode": "clock-time",
                    "qualitySelectionStrategy": "cap-bitrate",
                    "skipButtonOffset": -20,
                  },
                }
              }
              fullscreenState={
                Object {
                  "enterFullscreen": [Function],
                  "exitFullscreen": [Function],
                  "isFullscreen": false,
                  "updateProperty": [Function],
                }
              }
              gotoLive={[Function]}
              inspect={[Function]}
              nudge={[Function]}
              render={[Function]}
              setPosition={[Function]}
              updateProperty={[Function]}
            >
              <ConnectedPlayerStateClassNames
                className="ui-container"
                classNameDefinitions={
                  Object {
                    "isAtLivePosition": "is-at-live-position",
                    "isBuffering": "is-buffering",
                    "isDvrEnabled": "is-dvr-enabled",
                    "isFailed": "is-failed",
                    "isFullscreen": "is-fullscreen",
                    "isLive": "is-live",
                    "isMuted": "is-muted",
                    "isOnDemand": "is-on-demand",
                    "isPaused": "is-paused",
                    "isPlaying": "is-playing",
                    "isSeeking": "is-seeking",
                    "isStarting": "is-starting",
                    "isUserActive": "is-user-active",
                    "isUserInactive": "is-user-inactive",
                    "responsivenessPrefix": "player-size-",
                    "volumePrefix": "volume-level-",
                  }
                }
                classNamePrefix="replay-"
                enterFullscreen={[Function]}
                exitFullscreen={[Function]}
                isFullscreen={false}
                isUserActive={true}
                nudge={[Function]}
                updateProperty={[Function]}
              >
                <PlayerStateClassNames
                  className="ui-container"
                  classNameDefinitions={
                    Object {
                      "isAtLivePosition": "is-at-live-position",
                      "isBuffering": "is-buffering",
                      "isDvrEnabled": "is-dvr-enabled",
                      "isFailed": "is-failed",
                      "isFullscreen": "is-fullscreen",
                      "isLive": "is-live",
                      "isMuted": "is-muted",
                      "isOnDemand": "is-on-demand",
                      "isPaused": "is-paused",
                      "isPlaying": "is-playing",
                      "isSeeking": "is-seeking",
                      "isStarting": "is-starting",
                      "isUserActive": "is-user-active",
                      "isUserInactive": "is-user-inactive",
                      "responsivenessPrefix": "player-size-",
                      "volumePrefix": "volume-level-",
                    }
                  }
                  classNamePrefix="replay-"
                  enterFullscreen={[Function]}
                  exitFullscreen={[Function]}
                  gotoLive={[Function]}
                  inspect={[Function]}
                  isFullscreen={false}
                  isUserActive={true}
                  nudge={[Function]}
                  setPosition={[Function]}
                  updateProperty={[Function]}
                >
                  <div
                    className="replay-is-user-active replay-ui-container"
                    onKeyDown={[Function]}
                    onMouseMove={[Function]}
                    onTouchEnd={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={1}
                  >
                    <Component />
                    <ExitButton
                      classNamePrefix="replay-"
                      content={
                        <XCircle
                          color="currentColor"
                          size="24"
                        />
                      }
                      label="Exit"
                      onClick={[Function]}
                    >
                      <Button
                        className="exit-button"
                        classNamePrefix="replay-"
                        content={
                          <XCircle
                            color="currentColor"
                            size="24"
                          />
                        }
                        label="Exit"
                        onClick={[Function]}
                      >
                        <div
                          className="replay-button replay-exit-button"
                          onClick={[Function]}
                          title="Exit"
                        >
                          <XCircle
                            color="currentColor"
                            size="24"
                          >
                            <svg
                              fill="none"
                              height="24"
                              stroke="currentColor"
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth="2"
                              viewBox="0 0 24 24"
                              width="24"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <circle
                                cx="12"
                                cy="12"
                                r="10"
                              />
                              <line
                                x1="15"
                                x2="9"
                                y1="9"
                                y2="15"
                              />
                              <line
                                x1="9"
                                x2="15"
                                y1="9"
                                y2="15"
                              />
                            </svg>
                          </XCircle>
                        </div>
                      </Button>
                    </ExitButton>
                    <PlaybackMonitor
                      classNamePrefix="replay-"
                      closeButtonContent={
                        <XCircle
                          color="currentColor"
                          size="24"
                        />
                      }
                      configuration={
                        Object {
                          "setting": "value",
                          "ui": Object {
                            "liveDisplayMode": "clock-time",
                            "qualitySelectionStrategy": "cap-bitrate",
                            "skipButtonOffset": -20,
                          },
                        }
                      }
                    />
                    <ControlsBar
                      classNamePrefix="replay-"
                    >
                      <div
                        className="replay-controls-bar"
                      >
                        <ConnectedPlayPauseButton
                          label="Toggle play/pause"
                          pausedContent={
                            <Play
                              color="currentColor"
                              size="24"
                            />
                          }
                          playingContent={
                            <Pause
                              color="currentColor"
                              size="24"
                            />
                          }
                        >
                          <PlayPauseButton
                            classNamePrefix="replay-"
                            gotoLive={[Function]}
                            inspect={[Function]}
                            label="Toggle play/pause"
                            pausedContent={
                              <Play
                                color="currentColor"
                                size="24"
                              />
                            }
                            playingContent={
                              <Pause
                                color="currentColor"
                                size="24"
                              />
                            }
                            setPosition={[Function]}
                            updateProperty={[Function]}
                          >
                            <ToggleButton
                              className="play-pause-button"
                              classNamePrefix="replay-"
                              koko="haha"
                              label="Toggle play/pause"
                              onToggle={[Function]}
                              toggledOffContent={
                                <Pause
                                  color="currentColor"
                                  size="24"
                                />
                              }
                              toggledOnContent={
                                <Play
                                  color="currentColor"
                                  size="24"
                                />
                              }
                              useDefaultClassNaming={true}
                            >
                              <div
                                className="replay-toggle-button replay-play-pause-button replay-toggled-off"
                                onClick={[Function]}
                                title="Toggle play/pause"
                              >
                                <Pause
                                  color="currentColor"
                                  size="24"
                                >
                                  <svg
                                    fill="none"
                                    height="24"
                                    stroke="currentColor"
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth="2"
                                    viewBox="0 0 24 24"
                                    width="24"
                                    xmlns="http://www.w3.org/2000/svg"
                                  >
                                    <rect
                                      height="16"
                                      width="4"
                                      x="6"
                                      y="4"
                                    />
                                    <rect
                                      height="16"
                                      width="4"
                                      x="14"
                                      y="4"
                                    />
                                  </svg>
                                </Pause>
                              </div>
                            </ToggleButton>
                          </PlayPauseButton>
                        </ConnectedPlayPauseButton>
                        <ConnectedSkipButton
                          content={
                            <Unknown>
                              <span>
                                <RotateCcw
                                  color="currentColor"
                                  size="24"
                                />
                              </span>
                              <span>
                                –10
                              </span>
                            </Unknown>
                          }
                          label="Skip back 10 seconds"
                          offset={-20}
                        >
                          <SkipButton
                            classNamePrefix="replay-"
                            content={
                              <Unknown>
                                <span>
                                  <RotateCcw
                                    color="currentColor"
                                    size="24"
                                  />
                                </span>
                                <span>
                                  –10
                                </span>
                              </Unknown>
                            }
                            gotoLive={[Function]}
                            inspect={[Function]}
                            label="Skip back 10 seconds"
                            offset={-20}
                            setPosition={[Function]}
                            updateProperty={[Function]}
                          >
                            <Button
                              className="skip-button"
                              classNamePrefix="replay-"
                              content={
                                <Unknown>
                                  <span>
                                    <RotateCcw
                                      color="currentColor"
                                      size="24"
                                    />
                                  </span>
                                  <span>
                                    –10
                                  </span>
                                </Unknown>
                              }
                              label="Skip back 10 seconds"
                              onClick={[Function]}
                            >
                              <div
                                className="replay-button replay-skip-button"
                                onClick={[Function]}
                                title="Skip back 10 seconds"
                              >
                                <span>
                                  <RotateCcw
                                    color="currentColor"
                                    size="24"
                                  >
                                    <svg
                                      fill="none"
                                      height="24"
                                      stroke="currentColor"
                                      strokeLinecap="round"
                                      strokeLinejoin="round"
                                      strokeWidth="2"
                                      viewBox="0 0 24 24"
                                      width="24"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <polyline
                                        points="1 4 1 10 7 10"
                                      />
                                      <path
                                        d="M3.51 15a9 9 0 1 0 2.13-9.36L1 10"
                                      />
                                    </svg>
                                  </RotateCcw>
                                </span>
                                <span>
                                  –10
                                </span>
                              </div>
                            </Button>
                          </SkipButton>
                        </ConnectedSkipButton>
                        <ConnectedTimeline
                          handleContent=""
                          label="Timeline"
                          trackContent={<div />}
                        >
                          <Timeline
                            classNamePrefix="replay-"
                            gotoLive={[Function]}
                            handleContent=""
                            inspect={[Function]}
                            label="Timeline"
                            reduceDragGlitch={true}
                            setPosition={[Function]}
                            trackContent={<div />}
                            updateProperty={[Function]}
                          >
                            <Slider
                              className="timeline"
                              classNamePrefix="replay-"
                              handleClassName="timeline-handle"
                              handleContent=""
                              isUpdateBlocked={false}
                              label="Timeline"
                              maxValue={1}
                              onDrag={[Function]}
                              onValueChange={[Function]}
                              trackClassName="timeline-track"
                              trackContent={<div />}
                              value={0}
                            >
                              <div
                                className="replay-slider replay-timeline"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                                onMouseMove={[Function]}
                                onMouseUp={[Function]}
                                title="Timeline"
                              >
                                <div
                                  className="replay-slider-track replay-timeline-track"
                                >
                                  <div />
                                </div>
                                <div
                                  className="replay-slider-handle replay-timeline-handle"
                                  style={
                                    Object {
                                      "left": "0%",
                                    }
                                  }
                                />
                              </div>
                            </Slider>
                          </Timeline>
                        </ConnectedTimeline>
                        <ConnectedTimeDisplay
                          clockTimeLabel="Clock time"
                          durationLabel="Duration"
                          label="Video times"
                          liveDisplayMode="clock-time"
                          negativeMark="–"
                          positionLabel="Current time"
                        >
                          <TimeDisplay
                            clockTimeLabel="Clock time"
                            durationLabel="Duration"
                            gotoLive={[Function]}
                            inspect={[Function]}
                            label="Video times"
                            liveDisplayMode="clock-time"
                            negativeMark="–"
                            positionLabel="Current time"
                            setPosition={[Function]}
                            updateProperty={[Function]}
                          >
                            <div
                              className="replay-time-display"
                              title="Video times"
                            >
                              <span
                                className="replay-time-display-position"
                                title="Current time"
                              >
                                00:00
                              </span>
                            </div>
                          </TimeDisplay>
                        </ConnectedTimeDisplay>
                        <ConnectedGotoLiveButton
                          isAtLivePositionContent={
                            <span>
                              Live
                            </span>
                          }
                          isNotAtLivePositionContent={
                            <span>
                              Go live
                            </span>
                          }
                          label="Play from live position"
                        >
                          <GotoLiveButton
                            classNamePrefix="replay-"
                            gotoLive={[Function]}
                            inspect={[Function]}
                            isAtLivePositionContent={
                              <span>
                                Live
                              </span>
                            }
                            isNotAtLivePositionContent={
                              <span>
                                Go live
                              </span>
                            }
                            label="Play from live position"
                            setPosition={[Function]}
                            updateProperty={[Function]}
                          />
                        </ConnectedGotoLiveButton>
                        <ConnectedVolume
                          label="Volume and mute"
                          muteToggleLabel="Toggle mute"
                          mutedContent={
                            <VolumeX
                              color="currentColor"
                              size="24"
                            />
                          }
                          unmutedContent={
                            <Volume2
                              color="currentColor"
                              size="24"
                            />
                          }
                          volumeSliderHandleContent=""
                          volumeSliderLabel="Volume setting"
                        >
                          <Volume
                            classNamePrefix="replay-"
                            gotoLive={[Function]}
                            inspect={[Function]}
                            label="Volume and mute"
                            muteToggleLabel="Toggle mute"
                            mutedContent={
                              <VolumeX
                                color="currentColor"
                                size="24"
                              />
                            }
                            setPosition={[Function]}
                            unmutedContent={
                              <Volume2
                                color="currentColor"
                                size="24"
                              />
                            }
                            updateProperty={[Function]}
                            volumeSliderHandleContent=""
                            volumeSliderLabel="Volume setting"
                          >
                            <div
                              className="replay-volume"
                              title="Volume and mute"
                            >
                              <ToggleButton
                                className="mute-toggle"
                                classNamePrefix="replay-"
                                label="Toggle mute"
                                onToggle={[Function]}
                                toggledOffContent={
                                  <Volume2
                                    color="currentColor"
                                    size="24"
                                  />
                                }
                                toggledOnContent={
                                  <VolumeX
                                    color="currentColor"
                                    size="24"
                                  />
                                }
                                useDefaultClassNaming={true}
                              >
                                <div
                                  className="replay-toggle-button replay-mute-toggle replay-toggled-off"
                                  onClick={[Function]}
                                  title="Toggle mute"
                                >
                                  <Volume2
                                    color="currentColor"
                                    size="24"
                                  >
                                    <svg
                                      fill="none"
                                      height="24"
                                      stroke="currentColor"
                                      strokeLinecap="round"
                                      strokeLinejoin="round"
                                      strokeWidth="2"
                                      viewBox="0 0 24 24"
                                      width="24"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <polygon
                                        points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"
                                      />
                                      <path
                                        d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"
                                      />
                                    </svg>
                                  </Volume2>
                                </div>
                              </ToggleButton>
                              <Slider
                                className="volume-slider"
                                classNamePrefix="replay-"
                                handleClassName="volume-slider-handle"
                                handleContent=""
                                label="Volume setting"
                                maxValue={1}
                                onValueChange={[Function]}
                                trackClassName="volume-slider-track"
                                value={0}
                              >
                                <div
                                  className="replay-slider replay-volume-slider"
                                  onClick={[Function]}
                                  onMouseDown={[Function]}
                                  onMouseMove={[Function]}
                                  onMouseUp={[Function]}
                                  title="Volume setting"
                                >
                                  <div
                                    className="replay-slider-track replay-volume-slider-track"
                                  />
                                  <div
                                    className="replay-slider-handle replay-volume-slider-handle"
                                    style={
                                      Object {
                                        "left": "0%",
                                      }
                                    }
                                  />
                                </div>
                              </Slider>
                            </div>
                          </Volume>
                        </ConnectedVolume>
                        <ConnectedAudioSelector
                          label="Audio track selector"
                          toggleContent={
                            <MessageSquare
                              color="currentColor"
                              size="24"
                            />
                          }
                        >
                          <AudioSelector
                            classNamePrefix="replay-"
                            gotoLive={[Function]}
                            inspect={[Function]}
                            label="Audio track selector"
                            setPosition={[Function]}
                            toggleContent={
                              <MessageSquare
                                color="currentColor"
                                size="24"
                              />
                            }
                            updateProperty={[Function]}
                          />
                        </ConnectedAudioSelector>
                        <ConnectedSubtitlesSelector
                          label="Subtitles selector"
                          noSubtitlesLabel="No subtitles"
                          toggleContent={
                            <Type
                              color="currentColor"
                              size="24"
                            />
                          }
                        >
                          <SubtitlesSelector
                            classNamePrefix="replay-"
                            gotoLive={[Function]}
                            inspect={[Function]}
                            label="Subtitles selector"
                            noSubtitlesLabel="No subtitles"
                            setPosition={[Function]}
                            toggleContent={
                              <Type
                                color="currentColor"
                                size="24"
                              />
                            }
                            updateProperty={[Function]}
                          />
                        </ConnectedSubtitlesSelector>
                        <ConnectedQualitySelector
                          autoLabel="Automatic"
                          formatBitrateLabel={[Function]}
                          label="Video quality selector"
                          selectionStrategy="cap-bitrate"
                          toggleContent={
                            <Settings
                              color="currentColor"
                              size="24"
                            />
                          }
                        >
                          <QualitySelector
                            autoLabel="Automatic"
                            classNamePrefix="replay-"
                            formatBitrateLabel={[Function]}
                            gotoLive={[Function]}
                            inspect={[Function]}
                            label="Video quality selector"
                            selectionStrategy="cap-bitrate"
                            setPosition={[Function]}
                            toggleContent={
                              <Settings
                                color="currentColor"
                                size="24"
                              />
                            }
                            updateProperty={[Function]}
                          />
                        </ConnectedQualitySelector>
                        <FullscreenButton
                          classNamePrefix="replay-"
                          enterFullscreen={[Function]}
                          exitFullscreen={[Function]}
                          fullscreenContent={
                            <Minimize
                              color="currentColor"
                              size="24"
                            />
                          }
                          isFullscreen={false}
                          label="Toggle fullscreen"
                          normalContent={
                            <Maximize
                              color="currentColor"
                              size="24"
                            />
                          }
                          updateProperty={[Function]}
                        >
                          <ToggleButton
                            className="fullscreen-button"
                            classNamePrefix="replay-"
                            isOn={false}
                            label="Toggle fullscreen"
                            onToggle={[Function]}
                            toggledOffContent={
                              <Maximize
                                color="currentColor"
                                size="24"
                              />
                            }
                            toggledOnContent={
                              <Minimize
                                color="currentColor"
                                size="24"
                              />
                            }
                            useDefaultClassNaming={true}
                          >
                            <div
                              className="replay-toggle-button replay-fullscreen-button replay-toggled-off"
                              onClick={[Function]}
                              title="Toggle fullscreen"
                            >
                              <Maximize
                                color="currentColor"
                                size="24"
                              >
                                <svg
                                  fill="none"
                                  height="24"
                                  stroke="currentColor"
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  strokeWidth="2"
                                  viewBox="0 0 24 24"
                                  width="24"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"
                                  />
                                </svg>
                              </Maximize>
                            </div>
                          </ToggleButton>
                        </FullscreenButton>
                      </div>
                    </ControlsBar>
                    <ConnectedBufferingIndicator
                      content={<LoadingAnimation />}
                      label="Video is buffering"
                      renderStrategy="always"
                    >
                      <BufferingIndicator
                        content={<LoadingAnimation />}
                        gotoLive={[Function]}
                        inspect={[Function]}
                        label="Video is buffering"
                        renderStrategy="always"
                        setPosition={[Function]}
                        updateProperty={[Function]}
                      >
                        <div
                          className="replay-buffering-indicator"
                        >
                          <LoadingAnimation>
                            <svg
                              height="100%"
                              stroke="currentColor"
                              viewBox="0 0 38 38"
                              width="100%"
                            >
                              <g
                                fill="none"
                                fillRule="evenodd"
                              >
                                <g
                                  strokeWidth="2"
                                  transform="translate(1 1)"
                                >
                                  <circle
                                    cx="18"
                                    cy="18"
                                    r="18"
                                    stroke="currentColor"
                                    strokeOpacity="0.5"
                                  />
                                  <path
                                    className="animated"
                                    d="M36 18c0-9.94-8.06-18-18-18"
                                  />
                                </g>
                              </g>
                            </svg>
                          </LoadingAnimation>
                        </div>
                      </BufferingIndicator>
                    </ConnectedBufferingIndicator>
                  </div>
                </PlayerStateClassNames>
              </ConnectedPlayerStateClassNames>
            </KeyboardShortcuts>
          </ConnectedKeyboardShortcuts>
        </InteractionDetector>
      </Fullscreen>
    </div>
  </AspectRatio>
</PlayerUIContainer>
`;
